{
  parserClass="kz.pompei.lanact.gen.language.ActParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Act"
  psiImplClassSuffix="Impl"
  psiPackage="kz.pompei.lanact.gen.language.psi"
  psiImplPackage="kz.pompei.lanact.gen.language.impl"

  elementTypeHolderClass="kz.pompei.lanact.gen.language.ActTokenTypes"
  elementTypeClass="kz.pompei.lanact.parser.ActElementType"
  tokenTypeClass="kz.pompei.lanact.parser.ActTokenType"


}

actFile ::= COMMENT* part_import* definition_top

id ::= WORD (WORD|NUMBER)*

part_import ::= IMPORT id ASSIGN expr

private definition_top ::= definition_class | definition_interface

definition_class ::= CLASS id annotation* definition* END CLASS

definition_interface ::= INTERFACE id annotation* definition* END INTERFACE

definition ::= definition_fun | definition_operator

definition_fun ::= FUN id arg_def_cortege? ((RIGHT_ARROW type) | (ASSIGN id COLON type))? annotation* statement_do_done?

definition_operator ::= OPERATOR operation_name arg_def_cortege ((RIGHT_ARROW type) | (ASSIGN id COLON type))? annotation* statement_do_done?

operation_name ::= OP1 | OP2 | OP12 | operation_sq_name | PIPE
operation_sq_name ::= SQ_OPEN SQ_CLOSE

arg_def_cortege ::= PAR_OPEN (      id (COMMA id)* COLON type (ASSIGN expr)?
                             (COMMA id (COMMA id)* COLON type (ASSIGN expr)?)* COMMA?)? PAR_CLOSE

statement_do_done ::= DO statements do_done_last? DONE

do_done_last ::= part_catch+ part_finally?

part_catch   ::= CATCH   statements
part_finally ::= FINALLY statements

private statements ::= statement*

private statement ::= statement_var_def | statement_expr | statement_ret | statement_if | statement_do_done

statement_expr ::= LET expr assign_part?
statement_ret  ::= RET expr?

assign_part ::= ASSIGN expr

statement_if ::= IF expr statements statement_else_if* statement_else? END IF

annotation ::= DOG id cortege?

statement_var_def ::= LET id annotation* COLON type? assign_part?

type ::= type1 (PIPE type1)*
type1 ::= CEIL* id type_annotation*

type_annotation ::= PERCENT id cortege?

//
// Expressions
//

expr_str ::= STR_LEFT expr (STR_INNER expr)* STR_RIGHT

statement_else_if ::= ELSIF expr statements

statement_else ::= ELSE statements

private expr ::= expr_op2

//expr_select ::= expr_op2 QUESTION expr_op2 COLON expr_op2

operation1 ::= OP1 | OP12
operation2 ::= OP2 | OP12 | PIPE

expr_dot ::= expr_single (DOT id cortege_any?)*

expr_convert_op1 ::= expr_op1 (COLON2 (type1 | PAR_OPEN type PAR_CLOSE))*
expr_convert_dot ::= expr_dot (COLON2 (type1 | PAR_OPEN type PAR_CLOSE))*

private expr_op1    ::= operation1? expr_dot
private expr_single ::= expr_call | expr_const | expr_square | expr_str | expr_paren

expr_call ::= id cortege_any?

expr_paren  ::= PAR_OPEN expr PAR_CLOSE
expr_square ::=  SQ_OPEN expr SQ_CLOSE
private expr_const ::= NUMBER | YES | NO | STR_CONST

expr_op2 ::= expr_convert_op1 (operation2 expr_convert_dot)*

private cortege_any ::= cortege | cortege_sq
cortege    ::= PAR_OPEN (expr (COMMA expr)* COMMA?)? PAR_CLOSE
cortege_sq ::=  SQ_OPEN (expr (COMMA expr)* COMMA?)?  SQ_CLOSE
