{
  parserClass="kz.pompei.lanact.gen.language.ActParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Act"
  psiImplClassSuffix="Impl"
  psiPackage="kz.pompei.lanact.gen.language.psi"
  psiImplPackage="kz.pompei.lanact.gen.language.impl"

  elementTypeHolderClass="kz.pompei.lanact.gen.language.ActTokenTypes"
  elementTypeClass="kz.pompei.lanact.parser.ActElementType"
  tokenTypeClass="kz.pompei.lanact.parser.ActTokenType"


}

actFile ::= COMMENT* definition_top

private definition_top ::= definition_class | definition_interface

definition_class ::= CLASS id definitions END CLASS

definition_interface ::= INTERFACE id definitions END INTERFACE

definitions ::= definition_fun

definition_fun ::= FUN id statement_do_done?

id ::= WORD (WORD|NUMBER)*

statement_do_done ::= DO statements do_done_last? DONE

do_done_last ::= part_catch+ part_finally?

part_catch   ::= CATCH   statements
part_finally ::= FINALLY statements

private statements ::= statement*

private statement ::= statement_expr | statement_if | statement_do_done

statement_expr ::= LET expr assign_part?

assign_part ::= ASSIGN expr

statement_if ::= IF expr statements statement_else_if* statement_else? END IF

//
// Expressions
//

expr_str ::= STR_LEFT expr (STR_INNER expr)* STR_RIGHT

statement_else_if ::= ELSIF expr statements

statement_else ::= ELSE statements

private expr ::= expr_op2

operation1 ::= OP1 | OP12
operation2 ::= OP2 | OP12

expr_dot ::= expr_single (DOT id cortege?)*

private expr_op1 ::= operation1? expr_dot
private expr_single ::= expr_call | expr_const | expr_square | expr_str | expr_paren

expr_call ::= id cortege?

expr_paren  ::= PAR_OPEN expr PAR_CLOSE
expr_square ::=  SQ_OPEN expr SQ_CLOSE
private expr_const ::= NUMBER | YES | NO | NIL | STR_CONST


expr_op2 ::= expr_op1 (operation2 expr_dot)*

cortege ::= PAR_OPEN (expr (COMMA expr)* COMMA?)? PAR_CLOSE
