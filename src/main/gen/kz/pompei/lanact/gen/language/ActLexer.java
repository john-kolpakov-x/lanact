/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package kz.pompei.lanact.gen.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kz.pompei.lanact.lexer.ActElementStr;
import kz.pompei.lanact.gen.language.ActTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Act.flex</tt>
 */
public class ActLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14176 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\3\13\1\24\1\25\3\13"+
    "\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13\1\32"+
    "\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1\43\1"+
    "\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52\2\13"+
    "\1\53\1\1\1\54\1\16\1\27\1\55\1\56\1\57\1\60\1\61\1\62\2\16\1\63\1\56\1\57"+
    "\1\64\1\1\1\65\1\1\1\66\1\67\1\22\1\57\1\70\1\1\1\71\1\16\1\72\1\73\1\56\1"+
    "\57\1\70\1\1\1\62\1\16\1\43\1\74\1\75\1\76\1\77\1\1\1\71\2\1\1\100\1\40\1"+
    "\57\1\53\1\1\1\101\1\16\1\1\1\102\1\40\1\57\1\103\1\1\1\61\1\16\1\104\1\100"+
    "\1\40\1\13\1\105\1\61\1\106\1\16\1\44\1\107\1\110\1\13\1\111\1\112\3\1\1\27"+
    "\2\13\1\113\1\112\3\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\71\3\1\1\122"+
    "\1\13\1\123\1\1\1\124\7\1\2\13\1\32\1\125\1\1\1\126\1\127\1\130\1\131\1\1"+
    "\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13\1\134\2\13\1\136\1\137\1\14"+
    "\3\13\1\137\3\13\1\32\2\1\1\13\1\1\5\13\1\140\1\27\45\13\1\141\1\13\1\27\1"+
    "\32\4\13\1\32\1\142\1\143\1\16\1\13\1\16\1\13\1\16\1\143\1\71\3\13\1\144\1"+
    "\1\1\145\4\1\5\13\1\31\1\146\1\13\1\147\4\13\1\42\1\13\1\150\3\1\1\13\1\151"+
    "\1\152\2\13\1\153\1\13\1\77\3\1\1\13\1\112\3\13\1\152\4\1\1\154\5\1\1\107"+
    "\2\13\1\144\1\155\3\1\1\156\1\13\1\157\1\44\2\13\1\42\1\1\2\13\1\144\1\1\1"+
    "\41\1\44\1\13\1\151\1\50\5\1\1\160\1\161\14\13\4\1\21\13\1\140\2\13\1\140"+
    "\1\162\1\13\1\151\3\13\1\163\1\164\1\165\1\123\1\164\2\1\1\166\4\1\1\167\1"+
    "\1\1\123\6\1\1\170\1\171\1\172\1\173\1\174\3\1\1\175\147\1\2\13\1\150\2\13"+
    "\1\150\10\13\1\176\1\177\2\13\1\132\3\13\1\200\1\1\1\13\1\112\4\201\4\1\1"+
    "\125\35\1\1\202\2\1\1\203\1\27\4\13\1\204\1\27\4\13\1\133\1\107\1\13\1\151"+
    "\1\27\4\13\1\150\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2"+
    "\1\10\13\1\123\4\1\2\13\1\151\20\13\1\123\1\13\1\205\1\1\2\13\1\150\1\125"+
    "\1\13\1\151\4\13\1\42\2\1\1\206\1\207\5\13\1\210\1\13\1\150\1\31\3\1\1\206"+
    "\1\211\1\13\1\33\1\1\3\13\1\144\1\207\2\13\1\144\3\1\1\212\1\44\1\13\1\42"+
    "\1\13\1\112\1\1\1\13\1\123\1\52\2\13\1\33\1\125\1\1\1\213\1\214\2\13\1\50"+
    "\1\1\1\215\1\1\1\13\1\216\3\13\1\217\1\220\1\221\1\32\1\66\1\222\1\223\1\201"+
    "\2\13\1\133\1\42\7\13\1\33\1\1\72\13\1\144\1\13\1\224\2\13\1\153\20\1\26\13"+
    "\1\151\6\13\1\77\2\1\1\112\1\225\1\57\1\226\1\227\6\13\1\16\1\1\1\156\25\13"+
    "\1\151\1\1\4\13\1\207\2\13\1\31\2\1\1\153\7\1\1\213\7\13\1\123\2\1\1\27\1"+
    "\32\1\27\1\32\1\230\4\13\1\150\1\231\1\232\2\1\1\233\1\13\1\14\1\234\2\151"+
    "\2\1\7\13\1\32\30\1\1\13\1\123\3\13\1\71\2\1\2\13\1\1\1\13\1\235\2\13\1\42"+
    "\1\13\1\151\2\13\1\236\3\1\11\13\1\151\1\1\2\13\1\236\1\13\1\153\2\13\1\31"+
    "\3\13\1\144\11\1\23\13\1\112\1\13\1\42\1\31\11\1\1\237\2\13\1\240\1\13\1\42"+
    "\1\13\1\112\1\13\1\150\4\1\1\13\1\241\1\13\1\42\1\13\1\77\4\1\3\13\1\242\4"+
    "\1\1\71\1\243\1\13\1\144\2\1\1\13\1\123\1\13\1\123\2\1\1\122\1\13\1\152\1"+
    "\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\16\6\1\4\13\1\50\3\1\3\13\1\33\3\13"+
    "\1\33\60\1\1\156\2\13\1\31\4\1\1\156\2\13\2\1\1\13\1\50\1\1\1\156\1\13\1\112"+
    "\2\1\2\13\1\244\1\156\2\13\1\33\1\245\1\246\2\1\1\13\1\22\1\153\5\1\1\247"+
    "\1\250\1\50\2\13\1\150\2\1\1\73\1\56\1\57\1\70\1\1\1\251\1\16\11\1\3\13\1"+
    "\152\1\252\3\1\3\13\1\1\1\253\13\1\2\13\1\150\2\1\1\254\2\1\3\13\1\1\1\255"+
    "\3\1\2\13\1\32\5\1\1\13\1\77\30\1\4\13\1\1\1\125\34\1\3\13\1\50\20\1\1\57"+
    "\1\13\1\150\1\1\1\71\2\1\1\207\1\13\67\1\71\13\1\77\16\1\14\13\1\144\53\1"+
    "\2\13\1\150\75\1\44\13\1\112\33\1\43\13\1\50\1\13\1\150\7\1\1\13\1\151\1\1"+
    "\3\13\1\1\1\144\1\1\1\156\1\256\1\13\67\1\4\13\1\152\1\71\3\1\1\156\4\1\1"+
    "\71\1\1\76\13\1\123\1\1\57\13\1\33\20\1\1\16\77\1\6\13\1\32\1\123\1\50\1\77"+
    "\66\1\5\13\1\213\3\13\1\143\1\257\1\260\1\261\3\13\1\262\1\263\1\13\1\264"+
    "\1\265\1\40\24\13\1\266\1\13\1\40\1\133\1\13\1\133\1\13\1\213\1\13\1\213\1"+
    "\150\1\13\1\150\1\13\1\57\1\13\1\57\1\13\1\215\3\1\14\13\1\152\3\1\4\13\1"+
    "\144\113\1\1\261\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\153\1\276"+
    "\1\153\24\1\55\13\1\112\2\1\103\13\1\152\15\13\1\151\150\13\1\16\25\1\41\13"+
    "\1\151\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\102\3\0\1\73\2\0\1\57\1\60\1\76\1\10\1\75"+
    "\1\64\1\6\1\77\12\4\1\104\1\0\1\63\1\101\1\65\1\103\1\72\4\11\1\7\25\11\1"+
    "\61\1\12\1\62\1\74\1\5\1\0\1\20\1\11\1\16\1\43\1\31\1\33\1\11\1\46\1\26\2"+
    "\11\1\17\1\67\1\27\1\44\1\70\1\11\1\32\1\21\1\30\1\66\2\11\1\100\1\53\1\11"+
    "\1\14\1\13\1\15\7\0\1\1\24\0\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0\12\3\4\0\14"+
    "\3\16\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3"+
    "\3\1\0\1\3\1\0\4\3\1\0\23\3\1\0\11\3\1\24\1\3\1\71\1\3\1\56\1\37\2\3\1\34"+
    "\1\42\1\22\1\23\1\51\1\35\1\50\1\47\1\40\1\25\1\36\1\55\1\41\1\3\1\54\1\45"+
    "\4\3\1\52\5\3\10\0\6\3\1\0\26\3\2\0\1\3\6\0\10\3\10\0\13\3\5\0\3\3\33\0\6"+
    "\3\1\0\1\3\17\0\2\3\7\0\2\3\12\0\3\3\2\0\2\3\1\0\16\3\15\0\11\3\13\0\1\3\30"+
    "\0\6\3\4\0\2\3\4\0\1\3\5\0\6\3\4\0\1\3\11\0\1\3\3\0\1\3\7\0\11\3\7\0\5\3\1"+
    "\0\10\3\6\0\26\3\3\0\1\3\2\0\1\3\7\0\11\3\4\0\10\3\2\0\2\3\2\0\26\3\1\0\7"+
    "\3\1\0\1\3\3\0\4\3\3\0\1\3\20\0\1\3\15\0\2\3\1\0\1\3\5\0\6\3\4\0\2\3\1\0\2"+
    "\3\1\0\2\3\1\0\2\3\17\0\4\3\1\0\1\3\3\0\3\3\20\0\11\3\1\0\2\3\1\0\2\3\1\0"+
    "\5\3\3\0\1\3\2\0\1\3\30\0\1\3\13\0\10\3\2\0\1\3\3\0\1\3\1\0\6\3\3\0\3\3\1"+
    "\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\13\0\10\3\1\0\2\3"+
    "\10\0\3\3\5\0\1\3\4\0\10\3\1\0\6\3\1\0\5\3\3\0\1\3\3\0\2\3\15\0\13\3\2\0\1"+
    "\3\6\0\3\3\10\0\1\3\5\0\22\3\3\0\10\3\1\0\11\3\1\0\1\3\2\0\7\3\11\0\1\3\1"+
    "\0\2\3\15\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1"+
    "\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1\0\2\3\11\0\1\3\2\0\5\3\1\0\1\3\25\0\14\3"+
    "\1\0\24\3\13\0\5\3\22\0\7\3\4\0\4\3\3\0\1\3\3\0\2\3\7\0\3\3\4\0\15\3\14\0"+
    "\1\3\1\0\6\3\1\0\1\3\5\0\1\3\2\0\13\3\1\0\15\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\16\3\2\0\6\3\2\0\15\3\2\0"+
    "\1\3\1\0\10\3\7\0\15\3\1\0\6\3\23\0\1\3\4\0\1\3\3\0\5\3\2\0\22\3\1\0\1\3\5"+
    "\0\17\3\1\0\16\3\2\0\5\3\13\0\14\3\13\0\1\3\15\0\7\3\7\0\16\3\15\0\2\3\11"+
    "\0\4\3\1\0\4\3\3\0\2\3\11\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\6\3\1\0\7\3\1"+
    "\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\14\0\2\1\7\0\1\3\15\0\1\3\2\0\1\3\4"+
    "\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\13\3\2"+
    "\0\4\3\5\0\5\3\4\0\1\3\4\0\2\3\13\0\5\3\6\0\4\3\3\0\2\3\14\0\10\3\7\0\10\3"+
    "\1\0\7\3\6\0\2\3\12\0\5\3\5\0\2\3\3\0\7\3\6\0\3\3\12\0\2\3\13\0\11\3\2\0\27"+
    "\3\2\0\7\3\1\0\3\3\1\0\4\3\1\0\4\3\2\0\6\3\3\0\1\3\1\0\1\3\2\0\5\3\1\0\12"+
    "\3\12\0\5\3\1\0\3\3\1\0\10\3\4\0\7\3\3\0\1\3\3\0\2\3\1\0\1\3\3\0\2\3\2\0\5"+
    "\3\2\0\1\3\1\0\1\3\30\0\3\3\3\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\4\0\5\3\3\0\5"+
    "\3\5\0\1\3\1\0\10\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\12\3\6\0\12\3\2\0"+
    "\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\14\3\1\0\16\3\1\0\2\3\1\0\2\3\1\0\10\3\6"+
    "\0\4\3\4\0\16\3\2\0\1\3\1\0\14\3\1\0\2\3\3\0\1\3\2\0\4\3\1\0\2\3\12\0\10\3"+
    "\6\0\6\3\1\0\3\3\1\0\12\3\3\0\1\3\12\0\4\3\25\0\1\3\1\0\1\3\3\0\7\3\1\0\1"+
    "\3\1\0\4\3\1\0\17\3\1\0\2\3\14\0\3\3\7\0\4\3\11\0\2\3\1\0\1\3\20\0\4\3\10"+
    "\0\1\3\13\0\10\3\5\0\3\3\2\0\1\3\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3"+
    "\1\0\21\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\14\3\1\0\4\3\1\0\5\3\1\0\1\3\3\0\14"+
    "\3\2\0\10\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1"+
    "\3\4\0\1\3\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3\1\0\4\3\1\0\1\3\1"+
    "\0\12\3\1\0\5\3\1\0\3\3\1\0\5\3\1\0\5\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\2\1\12\3\1\10\11\3\1\11\1\12\1\13"+
    "\1\14\1\10\1\6\1\10\1\3\1\15\1\16\1\17"+
    "\1\20\2\10\1\3\1\10\1\1\1\21\1\22\2\0"+
    "\2\4\1\10\1\23\3\0\1\24\1\25\2\0\1\26"+
    "\1\27\10\3\1\30\1\3\1\31\11\3\1\32\2\3"+
    "\1\33\1\10\6\3\1\34\1\10\1\35\1\10\1\36"+
    "\1\3\2\10\1\3\1\10\1\0\1\37\1\4\3\0"+
    "\1\24\1\25\1\0\1\26\1\27\2\3\1\40\1\3"+
    "\1\41\3\3\1\32\1\3\1\42\1\43\1\3\1\44"+
    "\1\10\3\3\1\33\1\31\10\3\1\0\1\4\1\23"+
    "\1\0\10\3\1\45\5\3\1\41\6\3\1\23\1\46"+
    "\1\47\1\50\14\3\1\51\11\3\1\52\6\3\1\53"+
    "\1\3\1\54\3\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\105\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\105"+
    "\0\105\0\105\0\105\0\u0816\0\u085b\0\u08a0\0\u08e5\0\105"+
    "\0\u092a\0\105\0\105\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\105\0\u0c66"+
    "\0\u0cab\0\u0228\0\u0cf0\0\u0d35\0\u0d35\0\u026d\0\u0d7a\0\u0dbf"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\317\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\317\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590"+
    "\0\317\0\u15d5\0\105\0\u161a\0\105\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u1773\0\105\0\u17b8\0\u17fd\0\u1842\0\u0d35"+
    "\0\105\0\105\0\u0dbf\0\105\0\105\0\u1887\0\u18cc\0\317"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\317\0\u1a6a\0\317"+
    "\0\317\0\u1aaf\0\317\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\317"+
    "\0\317\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\105\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\317\0\u2127\0\u216c"+
    "\0\u21b1\0\u21f6\0\u223b\0\317\0\u2280\0\u22c5\0\u230a\0\u234f"+
    "\0\u2394\0\u23d9\0\u0cab\0\317\0\317\0\317\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\317\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\317\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\317\0\u2b65\0\317\0\u2baa\0\u2bef"+
    "\0\u2c34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\4\1\6\1\4\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\4\1\17\1\4\1\20\1\4\1\21\1\22\1\4"+
    "\1\23\1\24\1\25\1\26\1\27\1\4\1\30\1\4"+
    "\1\31\1\4\1\32\1\33\2\4\1\34\1\35\2\4"+
    "\1\36\2\4\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\3\4\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\106\0"+
    "\2\3\105\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\41\4\7\0\4\4\6\0\1\4\10\0\1\5\1\63"+
    "\1\64\1\65\1\0\1\66\4\0\4\66\4\0\3\66"+
    "\1\65\2\66\7\0\2\66\1\0\1\66\4\0\1\66"+
    "\12\0\3\66\7\0\1\66\14\0\1\67\106\0\1\70"+
    "\1\71\104\0\1\67\71\0\12\72\1\73\1\72\1\74"+
    "\1\75\67\72\12\76\1\77\1\76\1\100\1\101\67\76"+
    "\3\0\3\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\102\1\103\36\4\7\0\4\4\6\0\1\4\7\0"+
    "\3\4\1\0\1\4\1\0\1\4\4\0\13\4\1\104"+
    "\25\4\7\0\4\4\6\0\1\4\7\0\3\4\1\0"+
    "\1\4\1\0\1\4\4\0\11\4\1\105\27\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\5\4\1\106\24\4\1\107\6\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\21\4\1\110\17\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\11\4\1\111\3\4\1\112\23\4\7\0\1\4\1\113"+
    "\2\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\26\4\1\114\12\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\4\1\115\7\4\1\116\27\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\13\4\1\117\25\4\7\0\4\4\6\0\1\4\7\0"+
    "\3\4\1\0\1\4\1\0\1\4\4\0\10\4\1\120"+
    "\30\4\7\0\1\121\3\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\122\11\4"+
    "\1\123\13\4\1\124\5\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\125\12\4\1\126\17\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\7\4"+
    "\1\127\31\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\37\4\1\130\1\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\26\4\1\131\12\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\14\4\1\132\24\4\7\0\2\4\1\133\1\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\32\4\1\134\4\4\1\135\1\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\4\4\1\136\24\4\1\137\7\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\13\4\1\140\25\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\141\32\4\7\0\4\4\6\0\1\4\67\0\1\142"+
    "\1\143\1\67\13\0\1\144\66\0\2\67\1\145\103\0"+
    "\1\67\1\144\13\0\1\67\6\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\21\4\1\146\17\4\7\0\4\4"+
    "\6\0\1\4\77\0\1\147\107\0\1\67\105\0\1\150"+
    "\10\0\3\4\1\0\1\4\1\0\1\4\4\0\26\4"+
    "\1\151\12\4\7\0\4\4\6\0\1\4\105\0\1\152"+
    "\1\153\103\0\1\152\106\0\1\67\105\0\1\154\4\0"+
    "\1\5\1\63\103\0\1\155\104\0\2\66\1\0\1\66"+
    "\1\156\1\66\4\0\4\66\4\0\6\66\7\0\2\66"+
    "\1\0\1\66\4\0\1\66\10\0\1\156\1\0\3\66"+
    "\7\0\1\66\10\0\2\66\1\0\1\66\1\0\1\66"+
    "\4\0\4\66\4\0\6\66\7\0\2\66\1\0\1\66"+
    "\4\0\1\66\12\0\3\66\7\0\1\66\4\0\2\70"+
    "\1\0\102\70\13\71\1\157\71\71\12\72\1\73\1\72"+
    "\2\160\67\72\14\0\1\161\1\162\67\0\12\76\1\77"+
    "\1\76\2\163\67\76\14\0\1\164\1\165\72\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\166\36\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\167\26\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\12\4\1\170\26\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\25\4"+
    "\1\132\13\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\171\32\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\17\4\1\172\21\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\173\31\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\12\4"+
    "\1\174\26\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\41\4\7\0\2\4"+
    "\1\175\1\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\176\26\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\177\35\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\25\4"+
    "\1\200\13\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\201\26\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\11\4\1\202\27\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\11\4\1\203\27\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\16\4"+
    "\1\204\22\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\205\11\4"+
    "\1\206\20\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\31\4\1\207\7\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\27\4\1\210\11\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\20\4\1\211\20\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\5\4"+
    "\1\212\33\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\17\4\1\203\21\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\11\4\1\213\27\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\13\4\1\214\25\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\24\4"+
    "\1\215\14\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\216\31\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\32\4\1\217\6\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\21\4\1\220\17\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\141\35\4\7\0\4\4\6\0\1\4\67\0\1\67"+
    "\106\0\1\67\22\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\22\4\1\221\16\4\7\0\4\4\6\0\1\4"+
    "\77\0\1\67\110\0\1\67\10\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\14\4\1\132\24\4\7\0\4\4"+
    "\6\0\1\4\105\0\1\67\7\0\1\155\1\222\1\0"+
    "\1\65\1\0\1\66\4\0\4\66\4\0\3\66\1\65"+
    "\2\66\7\0\2\66\1\0\1\66\4\0\1\66\12\0"+
    "\3\66\7\0\1\66\10\0\1\223\100\0\12\71\1\224"+
    "\1\225\71\71\3\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\226\35\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\1\227"+
    "\40\4\7\0\4\4\6\0\1\4\7\0\3\4\1\0"+
    "\1\4\1\0\1\4\4\0\7\4\1\230\31\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\21\4\1\231\17\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\232\33\4\7\0\4\4\6\0\1\4\7\0"+
    "\3\4\1\0\1\4\1\0\1\4\4\0\13\4\1\233"+
    "\25\4\7\0\4\4\6\0\1\4\7\0\3\4\1\0"+
    "\1\4\1\0\1\4\4\0\26\4\1\234\12\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\10\4\1\235\2\4\1\236\25\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\2\4\1\237\36\4\7\0\4\4\6\0"+
    "\1\4\7\0\2\4\1\240\1\0\1\4\1\0\1\4"+
    "\4\0\41\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\27\4\1\241\11\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\21\4\1\242\17\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\32\4\1\243\6\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\16\4"+
    "\1\112\22\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\13\4\1\244\25\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\14\4\1\245\24\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\33\4\1\246\5\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\20\4"+
    "\1\247\20\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\17\4\1\250\21\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\22\4\1\251\16\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\17\4\1\252\21\4\7\0\4\4\6\0\1\4"+
    "\10\0\1\155\1\222\103\0\1\223\2\0\1\66\1\0"+
    "\1\66\4\0\4\66\4\0\6\66\7\0\2\66\1\0"+
    "\1\66\4\0\1\66\12\0\3\66\7\0\1\66\4\0"+
    "\12\71\1\253\1\225\71\71\3\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\254\35\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\30\4\1\255\10\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\7\4"+
    "\1\254\31\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\36\4\1\200\2\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\16\4\1\256\22\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\14\4\1\257\24\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\14\4"+
    "\1\260\24\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\15\4\1\256\23\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\4\1\261\37\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\16\4\1\262\22\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\21\4"+
    "\1\236\17\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\22\4\1\263\16\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\22\4\1\264\16\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\1\265\36\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\266\32\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\34\4\1\170\4\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\27\4\1\267\11\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\270\32\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\37\4"+
    "\1\271\1\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\15\4\1\272\23\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\273\26\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\274\37\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\5\4"+
    "\1\275\33\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\23\4\1\276\15\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\20\4\1\273\20\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\12\4\1\277\26\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\20\4"+
    "\1\300\20\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\301\32\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\20\4\1\302\20\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\20\4\1\303\20\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\304\36\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\35\4\1\305\3\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\16\4\1\132\22\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\21\4\1\306\17\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\26\4"+
    "\1\307\12\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\34\4\1\255\4\4"+
    "\7\0\4\4\6\0\1\4\7\0\3\4\1\0\1\4"+
    "\1\0\1\4\4\0\20\4\1\310\20\4\7\0\4\4"+
    "\6\0\1\4\7\0\3\4\1\0\1\4\1\0\1\4"+
    "\4\0\32\4\1\311\6\4\7\0\4\4\6\0\1\4"+
    "\7\0\3\4\1\0\1\4\1\0\1\4\4\0\34\4"+
    "\1\201\4\4\7\0\4\4\6\0\1\4\7\0\3\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\312\40\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\24\4\1\313\14\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\14\4\1\314\24\4\7\0\4\4\6\0\1\4\7\0"+
    "\3\4\1\0\1\4\1\0\1\4\4\0\21\4\1\315"+
    "\17\4\7\0\4\4\6\0\1\4\7\0\3\4\1\0"+
    "\1\4\1\0\1\4\4\0\22\4\1\314\16\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\13\4\1\316\25\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\7\4\1\316\31\4\7\0\4\4\6\0\1\4\7\0"+
    "\3\4\1\0\1\4\1\0\1\4\4\0\5\4\1\317"+
    "\33\4\7\0\4\4\6\0\1\4\7\0\3\4\1\0"+
    "\1\4\1\0\1\4\4\0\34\4\1\320\4\4\7\0"+
    "\4\4\6\0\1\4\7\0\3\4\1\0\1\4\1\0"+
    "\1\4\4\0\17\4\1\321\21\4\7\0\4\4\6\0"+
    "\1\4\7\0\3\4\1\0\1\4\1\0\1\4\4\0"+
    "\32\4\1\305\6\4\7\0\4\4\6\0\1\4\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11385];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\31\1\4\11\4\1\1\11"+
    "\1\1\2\11\7\1\2\0\2\1\1\11\1\1\3\0"+
    "\2\1\2\0\43\1\1\11\1\1\1\11\5\1\1\0"+
    "\1\11\1\1\3\0\2\11\1\0\2\11\34\1\1\0"+
    "\1\1\1\11\1\0\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public int yyline, yycolumn;

  private boolean strPart = false;

  public StringBuffer str = new StringBuffer();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 45: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 3: 
            { yybegin(YYINITIAL); return ActTokenTypes.WORD;
            } 
            // fall through
          case 47: break;
          case 4: 
            { yybegin(YYINITIAL); return ActTokenTypes.NUMBER;
            } 
            // fall through
          case 48: break;
          case 5: 
            { yybegin(YYINITIAL); return ActTokenTypes.DOT;
            } 
            // fall through
          case 49: break;
          case 6: 
            { yybegin(YYINITIAL); return ActTokenTypes.OP12;
            } 
            // fall through
          case 50: break;
          case 7: 
            { yybegin(YYINITIAL); return ActTokenTypes.PIPE;
            } 
            // fall through
          case 51: break;
          case 8: 
            { yybegin(YYINITIAL); return ActTokenTypes.OP2;
            } 
            // fall through
          case 52: break;
          case 9: 
            { yybegin(YYINITIAL); return ActTokenTypes.PAR_OPEN;
            } 
            // fall through
          case 53: break;
          case 10: 
            { yybegin(YYINITIAL); return ActTokenTypes.PAR_CLOSE;
            } 
            // fall through
          case 54: break;
          case 11: 
            { yybegin(YYINITIAL); return ActTokenTypes.SQ_OPEN;
            } 
            // fall through
          case 55: break;
          case 12: 
            { yybegin(YYINITIAL); return ActTokenTypes.SQ_CLOSE;
            } 
            // fall through
          case 56: break;
          case 13: 
            { yybegin(YYINITIAL); return ActTokenTypes.DOG;
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(YYINITIAL); return ActTokenTypes.PERCENT;
            } 
            // fall through
          case 58: break;
          case 15: 
            { yybegin(YYINITIAL); return ActTokenTypes.CEIL;
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(YYINITIAL); return ActTokenTypes.COMMA;
            } 
            // fall through
          case 60: break;
          case 17: 
            { yybegin(YYINITIAL); return ActTokenTypes.QUESTION;
            } 
            // fall through
          case 61: break;
          case 18: 
            { yybegin(YYINITIAL); return ActTokenTypes.COLON;
            } 
            // fall through
          case 62: break;
          case 19: 
            { yybegin(YYINITIAL); return ActTokenTypes.COMMENT;
            } 
            // fall through
          case 63: break;
          case 20: 
            { yybegin(YYINITIAL); return ActTokenTypes.STR_LEFT;
            } 
            // fall through
          case 64: break;
          case 21: 
            { yybegin(YYINITIAL); return ActTokenTypes.STR_CONST;
            } 
            // fall through
          case 65: break;
          case 22: 
            { yybegin(YYINITIAL); return ActTokenTypes.STR_INNER;
            } 
            // fall through
          case 66: break;
          case 23: 
            { yybegin(YYINITIAL); return ActTokenTypes.STR_RIGHT;
            } 
            // fall through
          case 67: break;
          case 24: 
            { yybegin(YYINITIAL); return ActTokenTypes.IF;
            } 
            // fall through
          case 68: break;
          case 25: 
            { yybegin(YYINITIAL); return ActTokenTypes.NO;
            } 
            // fall through
          case 69: break;
          case 26: 
            { yybegin(YYINITIAL); return ActTokenTypes.OP1;
            } 
            // fall through
          case 70: break;
          case 27: 
            { yybegin(YYINITIAL); return ActTokenTypes.DO;
            } 
            // fall through
          case 71: break;
          case 28: 
            { yybegin(YYINITIAL); return ActTokenTypes.YES;
            } 
            // fall through
          case 72: break;
          case 29: 
            { yybegin(YYINITIAL); return ActTokenTypes.ASSIGN;
            } 
            // fall through
          case 73: break;
          case 30: 
            { yybegin(YYINITIAL); return ActTokenTypes.RIGHT_ARROW;
            } 
            // fall through
          case 74: break;
          case 31: 
            { yybegin(YYINITIAL); return ActTokenTypes.COLON2;
            } 
            // fall through
          case 75: break;
          case 32: 
            { yybegin(YYINITIAL); return ActTokenTypes.LET;
            } 
            // fall through
          case 76: break;
          case 33: 
            { yybegin(YYINITIAL); return ActTokenTypes.DONE;
            } 
            // fall through
          case 77: break;
          case 34: 
            { yybegin(YYINITIAL); return ActTokenTypes.END;
            } 
            // fall through
          case 78: break;
          case 35: 
            { yybegin(YYINITIAL); return ActTokenTypes.RET;
            } 
            // fall through
          case 79: break;
          case 36: 
            { yybegin(YYINITIAL); return ActTokenTypes.FUN;
            } 
            // fall through
          case 80: break;
          case 37: 
            { yybegin(YYINITIAL); return ActTokenTypes.ELSE;
            } 
            // fall through
          case 81: break;
          case 38: 
            { yybegin(YYINITIAL); return ActTokenTypes.CLASS;
            } 
            // fall through
          case 82: break;
          case 39: 
            { yybegin(YYINITIAL); return ActTokenTypes.CATCH;
            } 
            // fall through
          case 83: break;
          case 40: 
            { yybegin(YYINITIAL); return ActTokenTypes.ELSIF;
            } 
            // fall through
          case 84: break;
          case 41: 
            { yybegin(YYINITIAL); return ActTokenTypes.IMPORT;
            } 
            // fall through
          case 85: break;
          case 42: 
            { yybegin(YYINITIAL); return ActTokenTypes.FINALLY;
            } 
            // fall through
          case 86: break;
          case 43: 
            { yybegin(YYINITIAL); return ActTokenTypes.OPERATOR;
            } 
            // fall through
          case 87: break;
          case 44: 
            { yybegin(YYINITIAL); return ActTokenTypes.INTERFACE;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
