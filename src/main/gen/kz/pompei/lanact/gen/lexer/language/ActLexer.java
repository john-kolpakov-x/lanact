/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package kz.pompei.lanact.gen.lexer.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import kz.pompei.lanact.lexer.ActElementStr;
import kz.pompei.lanact.lexer.ActLexerTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Act.flex</tt>
 */
public class ActLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14112 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\25\1\30\4\13\1\30\1"+
    "\140\1\141\1\16\1\13\1\16\1\13\1\16\1\141\1\67\3\13\1\142\1\1\1\143\4\1\5"+
    "\13\1\27\1\144\1\13\1\145\4\13\1\40\1\13\1\146\3\1\1\13\1\147\1\150\2\13\1"+
    "\151\1\13\1\75\3\1\1\13\1\110\3\13\1\150\4\1\1\152\5\1\1\105\2\13\1\142\1"+
    "\153\3\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\142\1\1\1\37\1\42\1\13"+
    "\1\147\1\46\5\1\1\156\1\157\14\13\4\1\21\13\1\136\2\13\1\136\1\160\1\13\1"+
    "\147\3\13\1\161\1\162\1\163\1\121\1\162\2\1\1\164\4\1\1\165\1\1\1\121\6\1"+
    "\1\166\1\167\1\170\1\171\1\172\3\1\1\173\147\1\2\13\1\146\2\13\1\146\10\13"+
    "\1\174\1\175\2\13\1\130\3\13\1\176\1\1\1\13\1\110\4\177\4\1\1\123\35\1\1\200"+
    "\2\1\1\201\1\25\4\13\1\202\1\25\4\13\1\131\1\105\1\13\1\147\1\25\4\13\1\146"+
    "\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\121\4"+
    "\1\2\13\1\147\20\13\1\121\1\13\1\203\1\1\2\13\1\146\1\123\1\13\1\147\4\13"+
    "\1\40\2\1\1\204\1\205\5\13\1\206\1\13\1\146\1\27\3\1\1\204\1\207\1\13\1\31"+
    "\1\1\3\13\1\142\1\205\2\13\1\142\3\1\1\210\1\42\1\13\1\40\1\13\1\110\1\1\1"+
    "\13\1\121\1\50\2\13\1\31\1\123\1\1\1\211\1\212\2\13\1\46\1\1\1\213\1\1\1\13"+
    "\1\214\3\13\1\215\1\216\1\217\1\30\1\64\1\220\1\221\1\177\2\13\1\131\1\40"+
    "\7\13\1\31\1\1\72\13\1\142\1\13\1\222\2\13\1\151\20\1\26\13\1\147\6\13\1\75"+
    "\2\1\1\110\1\223\1\55\1\224\1\225\6\13\1\16\1\1\1\154\25\13\1\147\1\1\4\13"+
    "\1\205\2\13\1\27\2\1\1\151\7\1\1\211\7\13\1\121\2\1\1\25\1\30\1\25\1\30\1"+
    "\226\4\13\1\146\1\227\1\230\2\1\1\231\1\13\1\14\1\232\2\147\2\1\7\13\1\30"+
    "\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\233\2\13\1\40\1\13\1\147\2"+
    "\13\1\234\3\1\11\13\1\147\1\1\2\13\1\234\1\13\1\151\2\13\1\27\3\13\1\142\11"+
    "\1\23\13\1\110\1\13\1\40\1\27\11\1\1\235\2\13\1\236\1\13\1\40\1\13\1\110\1"+
    "\13\1\146\4\1\1\13\1\237\1\13\1\40\1\13\1\75\4\1\3\13\1\240\4\1\1\67\1\241"+
    "\1\13\1\142\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\150\1\1\3\13\1\40\1"+
    "\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1"+
    "\154\2\13\1\27\4\1\1\154\2\13\2\1\1\13\1\46\1\1\1\154\1\13\1\110\2\1\2\13"+
    "\1\242\1\154\2\13\1\31\1\243\1\244\2\1\1\13\1\22\1\151\5\1\1\245\1\246\1\46"+
    "\2\13\1\146\2\1\1\71\1\54\1\55\1\66\1\1\1\247\1\16\11\1\3\13\1\150\1\250\3"+
    "\1\3\13\1\1\1\251\13\1\2\13\1\146\2\1\1\252\2\1\3\13\1\1\1\253\3\1\2\13\1"+
    "\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55\1\13\1\146"+
    "\1\1\1\67\2\1\1\205\1\13\67\1\71\13\1\75\16\1\14\13\1\142\53\1\2\13\1\146"+
    "\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\146\7\1\1\13\1\147\1\1\3\13\1\1\1"+
    "\142\1\1\1\154\1\254\1\13\67\1\4\13\1\150\1\67\3\1\1\154\4\1\1\67\1\1\76\13"+
    "\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75\66\1\5\13\1"+
    "\211\3\13\1\141\1\255\1\256\1\257\3\13\1\260\1\261\1\13\1\262\1\263\1\36\24"+
    "\13\1\264\1\13\1\36\1\131\1\13\1\131\1\13\1\211\1\13\1\211\1\146\1\13\1\146"+
    "\1\13\1\55\1\13\1\55\1\13\1\213\3\1\14\13\1\150\3\1\4\13\1\142\113\1\1\257"+
    "\1\13\1\265\1\266\1\267\1\270\1\271\1\272\1\273\1\151\1\274\1\151\24\1\55"+
    "\13\1\110\2\1\103\13\1\150\15\13\1\147\150\13\1\16\25\1\41\13\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\4\1\3\22\0\1\4\1\55\1\0\1\63\1\0\1\57\1\62\1\0\1\42\1"+
    "\43\1\15\1\7\1\47\1\51\1\11\1\14\12\6\1\52\1\47\1\50\1\53\1\54\1\64\1\56\4"+
    "\13\1\12\7\13\1\40\1\13\1\35\2\13\1\34\1\13\1\36\6\13\1\44\1\67\1\45\1\47"+
    "\1\10\1\0\1\30\1\13\1\31\1\41\1\27\1\24\2\13\1\16\2\13\1\32\1\17\1\26\1\21"+
    "\1\20\1\13\1\22\1\33\1\23\1\25\2\13\1\46\1\37\1\13\1\65\1\60\1\66\1\61\6\0"+
    "\1\1\24\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14\5\16\0\5\5\7\0\1\5"+
    "\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1"+
    "\0\23\5\1\0\13\5\10\0\6\5\1\0\26\5\2\0\1\5\6\0\10\5\10\0\13\5\5\0\3\5\33\0"+
    "\6\5\1\0\1\5\17\0\2\5\7\0\2\5\12\0\3\5\2\0\2\5\1\0\16\5\15\0\11\5\13\0\1\5"+
    "\30\0\6\5\4\0\2\5\4\0\1\5\5\0\6\5\4\0\1\5\11\0\1\5\3\0\1\5\7\0\11\5\7\0\5"+
    "\5\1\0\10\5\6\0\26\5\3\0\1\5\2\0\1\5\7\0\11\5\4\0\10\5\2\0\2\5\2\0\26\5\1"+
    "\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5\1\0\1\5\5\0\6\5\4\0\2\5\1"+
    "\0\2\5\1\0\2\5\1\0\2\5\17\0\4\5\1\0\1\5\3\0\3\5\20\0\11\5\1\0\2\5\1\0\2\5"+
    "\1\0\5\5\3\0\1\5\2\0\1\5\30\0\1\5\13\0\10\5\2\0\1\5\3\0\1\5\1\0\6\5\3\0\3"+
    "\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\13\0\10\5\1\0"+
    "\2\5\10\0\3\5\5\0\1\5\4\0\10\5\1\0\6\5\1\0\5\5\3\0\1\5\3\0\2\5\15\0\13\5\2"+
    "\0\1\5\6\0\3\5\10\0\1\5\5\0\22\5\3\0\10\5\1\0\11\5\1\0\1\5\2\0\7\5\11\0\1"+
    "\5\1\0\2\5\15\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3"+
    "\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\25\0\14"+
    "\5\1\0\24\5\13\0\5\5\22\0\7\5\4\0\4\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14"+
    "\0\1\5\1\0\6\5\1\0\1\5\5\0\1\5\2\0\13\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1"+
    "\0\4\5\2\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\15\5\2"+
    "\0\1\5\1\0\10\5\7\0\15\5\1\0\6\5\23\0\1\5\4\0\1\5\3\0\5\5\2\0\22\5\1\0\1\5"+
    "\5\0\17\5\1\0\16\5\2\0\5\5\13\0\14\5\13\0\1\5\15\0\7\5\7\0\16\5\15\0\2\5\11"+
    "\0\4\5\1\0\4\5\3\0\2\5\11\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7\5\1"+
    "\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\14\0\2\1\7\0\1\5\15\0\1\5\2\0\1\5\4"+
    "\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2"+
    "\0\4\5\5\0\5\5\4\0\1\5\4\0\2\5\13\0\5\5\6\0\4\5\3\0\2\5\14\0\10\5\7\0\10\5"+
    "\1\0\7\5\6\0\2\5\12\0\5\5\5\0\2\5\3\0\7\5\6\0\3\5\12\0\2\5\13\0\11\5\2\0\27"+
    "\5\2\0\7\5\1\0\3\5\1\0\4\5\1\0\4\5\2\0\6\5\3\0\1\5\1\0\1\5\2\0\5\5\1\0\12"+
    "\5\12\0\5\5\1\0\3\5\1\0\10\5\4\0\7\5\3\0\1\5\3\0\2\5\1\0\1\5\3\0\2\5\2\0\5"+
    "\5\2\0\1\5\1\0\1\5\30\0\3\5\3\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\4\0\5\5\3\0\5"+
    "\5\5\0\1\5\1\0\10\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12\5\6\0\12\5\2\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\14\5\1\0\16\5\1\0\2\5\1\0\2\5\1\0\10\5\6"+
    "\0\4\5\4\0\16\5\2\0\1\5\1\0\14\5\1\0\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5"+
    "\6\0\6\5\1\0\3\5\1\0\12\5\3\0\1\5\12\0\4\5\25\0\1\5\1\0\1\5\3\0\7\5\1\0\1"+
    "\5\1\0\4\5\1\0\17\5\1\0\2\5\14\0\3\5\7\0\4\5\11\0\2\5\1\0\1\5\20\0\4\5\10"+
    "\0\1\5\13\0\10\5\5\0\3\5\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5"+
    "\1\0\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\14"+
    "\5\2\0\10\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1"+
    "\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1"+
    "\0\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\5"+
    "\15\3\1\7\1\10\1\11\1\12\1\3\15\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\2\0\2\4\2\5"+
    "\1\0\1\3\1\21\2\3\1\22\1\3\1\5\1\3"+
    "\1\23\2\3\1\22\5\3\1\24\1\3\7\5\1\25"+
    "\1\26\1\27\1\30\1\31\1\4\1\0\1\32\2\0"+
    "\2\3\1\33\5\3\1\0\1\4\2\32\1\0\1\32"+
    "\4\3\1\34\1\3\1\35\2\3\1\36\5\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\160"+
    "\0\160\0\160\0\160\0\u04d0\0\160\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\160\0\160\0\u07a8\0\160\0\160\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\250"+
    "\0\u09d8\0\u0a10\0\250\0\u0a48\0\250\0\u0a80\0\250\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\160\0\160\0\160\0\160\0\160\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\250\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\160\0\u1180\0\u11b8\0\u0f18"+
    "\0\u11f0\0\u1228\0\u1260\0\u1298\0\250\0\u12d0\0\250\0\u1308"+
    "\0\u1340\0\250\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\0\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\5\1\10\2\5\1\11\1\12\1\13\1\14\1\5"+
    "\1\15\1\16\1\5\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\16\1\5\1\24\2\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\35"+
    "\1\47\1\50\1\51\1\52\1\53\1\3\2\54\2\0"+
    "\61\54\1\55\1\56\1\57\75\0\2\5\1\0\1\5"+
    "\1\0\2\5\2\0\24\5\4\0\1\5\27\0\1\6"+
    "\1\0\1\60\1\61\1\62\1\63\2\0\11\63\1\62"+
    "\12\63\4\0\1\63\27\0\1\6\1\35\71\0\1\64"+
    "\72\0\1\65\1\66\67\0\1\35\57\0\2\5\1\0"+
    "\1\5\1\0\2\5\2\0\1\5\1\67\4\5\1\70"+
    "\1\5\1\71\13\5\4\0\1\5\26\0\2\5\1\0"+
    "\1\5\1\0\2\5\2\0\7\5\1\72\1\5\1\73"+
    "\12\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\2\5\1\74\1\5\1\75\17\5\4\0"+
    "\1\5\26\0\2\5\1\0\1\5\1\0\2\5\2\0"+
    "\11\5\1\76\12\5\4\0\1\5\26\0\2\5\1\0"+
    "\1\5\1\0\2\5\2\0\1\77\6\5\1\100\14\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\1\101\2\5\1\102\20\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\14\5\1\103"+
    "\7\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\10\5\1\104\13\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\14\5\1\105"+
    "\7\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\17\5\1\106\4\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\11\5\1\107"+
    "\12\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\11\5\1\73\12\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\3\5\1\110"+
    "\20\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\3\5\1\111\20\5\4\0\1\5\71\0"+
    "\1\112\1\35\1\0\1\113\1\35\21\0\1\6\41\0"+
    "\2\35\2\0\1\35\3\0\1\35\61\0\1\114\70\0"+
    "\1\113\1\35\64\0\1\35\1\0\1\35\1\115\66\0"+
    "\1\35\5\0\1\35\64\0\1\35\70\0\1\35\61\0"+
    "\1\35\6\0\1\116\71\0\1\117\66\0\1\35\1\0"+
    "\1\35\70\0\1\120\3\0\2\54\2\0\61\54\25\0"+
    "\1\121\1\122\2\0\1\123\36\0\1\124\1\125\7\0"+
    "\1\6\1\0\1\60\65\0\1\126\67\0\1\63\1\127"+
    "\1\63\1\0\2\63\2\0\24\63\4\0\1\63\2\0"+
    "\1\127\24\0\1\63\1\0\1\63\1\0\2\63\2\0"+
    "\24\63\4\0\1\63\32\0\1\35\72\0\1\130\53\0"+
    "\15\131\1\132\52\131\5\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\2\5\1\133\21\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\5\5\1\134"+
    "\16\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\14\5\1\135\7\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\11\5\1\136"+
    "\12\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\5\5\1\135\16\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\10\5\1\135"+
    "\13\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\14\5\1\73\7\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\5\5\1\75"+
    "\16\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\15\5\1\137\6\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\23\5\1\75"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\12\5\1\140\11\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\17\5\1\141\4\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\15\5\1\73\6\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\10\5\1\142\13\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\4\5\1\75\17\5\4\0\1\5\71\0\1\35"+
    "\72\0\2\35\65\0\1\35\71\0\1\35\73\0\1\35"+
    "\71\0\1\35\71\0\1\35\11\0\1\126\1\0\1\143"+
    "\1\0\1\62\1\63\2\0\11\63\1\62\12\63\4\0"+
    "\1\63\27\0\1\144\61\0\2\130\1\145\1\146\64\130"+
    "\15\131\1\147\66\131\1\150\1\147\52\131\5\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\3\5\1\151\20\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\11\5\1\152\12\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\4\5\1\153\17\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\1\154\10\5\1\155\12\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\15\5\1\156"+
    "\6\5\4\0\1\5\26\0\2\5\1\0\1\5\1\0"+
    "\2\5\2\0\20\5\1\73\3\5\4\0\1\5\26\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\11\5\1\157"+
    "\12\5\4\0\1\5\27\0\1\126\1\0\1\143\65\0"+
    "\1\144\3\0\2\63\2\0\24\63\4\0\1\63\23\0"+
    "\1\145\65\0\14\131\1\145\1\147\52\131\5\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\4\5\1\76\17\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\4\5\1\160\17\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\12\5\1\161\11\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\6\5\1\162\15\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\15\5\1\135\6\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\6\5\1\163\15\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\5\5\1\164\16\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\12\5\1\165\11\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\3\5\1\166\20\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\13\5\1\167\10\5\4\0\1\5\26\0\2\5"+
    "\1\0\1\5\1\0\2\5\2\0\4\5\1\135\17\5"+
    "\4\0\1\5\26\0\2\5\1\0\1\5\1\0\2\5"+
    "\2\0\11\5\1\135\12\5\4\0\1\5\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\23\1\4\11\1\1\1\11\14\1\2\11"+
    "\1\1\2\11\1\1\2\0\4\1\1\0\32\1\5\11"+
    "\1\1\1\0\1\1\2\0\10\1\1\0\1\1\1\11"+
    "\1\1\1\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  boolean strPart = false;

  StringBuffer str = new StringBuffer();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 31: break;
          case 2: 
            { yybegin(YYINITIAL); return ActLexerTypes.WHITE_SPACE;
            } 
            // fall through
          case 32: break;
          case 3: 
            { yybegin(YYINITIAL); return ActLexerTypes.WORD;
            } 
            // fall through
          case 33: break;
          case 4: 
            { yybegin(YYINITIAL); return ActLexerTypes.NUMBER;
            } 
            // fall through
          case 34: break;
          case 5: 
            { yybegin(YYINITIAL); return ActLexerTypes.SIGN;
            } 
            // fall through
          case 35: break;
          case 6: 
            { yybegin(YYINITIAL); return ActLexerTypes.DOT;
            } 
            // fall through
          case 36: break;
          case 7: 
            { yybegin(YYINITIAL); return ActLexerTypes.PARENTHESIS_OPEN;
            } 
            // fall through
          case 37: break;
          case 8: 
            { yybegin(YYINITIAL); return ActLexerTypes.PARENTHESIS_CLOSE;
            } 
            // fall through
          case 38: break;
          case 9: 
            { yybegin(YYINITIAL); return ActLexerTypes.SQUARE_OPEN;
            } 
            // fall through
          case 39: break;
          case 10: 
            { yybegin(YYINITIAL); return ActLexerTypes.SQUARE_CLOSE;
            } 
            // fall through
          case 40: break;
          case 11: 
            { str.setLength(0); strPart = false; yybegin(STRING);
            } 
            // fall through
          case 41: break;
          case 12: 
            { str.setLength(0); strPart = true;  yybegin(STRING);
            } 
            // fall through
          case 42: break;
          case 13: 
            { str.append( yytext() );
            } 
            // fall through
          case 43: break;
          case 14: 
            { yybegin(YYINITIAL);
                      return new ActElementStr(strPart ? ActElementStr.STR_INNER : ActElementStr.STR_OPEN, str.toString());
            } 
            // fall through
          case 44: break;
          case 15: 
            { yybegin(YYINITIAL);
                      return new ActElementStr(strPart ? ActElementStr.STR_CLOSE : ActElementStr.STR_FULL, str.toString());
            } 
            // fall through
          case 45: break;
          case 16: 
            { str.append( '\\' );
            } 
            // fall through
          case 46: break;
          case 17: 
            { yybegin(YYINITIAL); return ActLexerTypes.IF;
            } 
            // fall through
          case 47: break;
          case 18: 
            { yybegin(YYINITIAL); return ActLexerTypes.KEYWORD;
            } 
            // fall through
          case 48: break;
          case 19: 
            { yybegin(YYINITIAL); return ActLexerTypes.FI;
            } 
            // fall through
          case 49: break;
          case 20: 
            { yybegin(YYINITIAL); return ActLexerTypes.DO;
            } 
            // fall through
          case 50: break;
          case 21: 
            { str.append( '\r' );
            } 
            // fall through
          case 51: break;
          case 22: 
            { str.append( '\t' );
            } 
            // fall through
          case 52: break;
          case 23: 
            { str.append( '\n' );
            } 
            // fall through
          case 53: break;
          case 24: 
            { str.append( '{' );
            } 
            // fall through
          case 54: break;
          case 25: 
            { str.append( '}' );
            } 
            // fall through
          case 55: break;
          case 26: 
            { /*Nothing to do*/
            } 
            // fall through
          case 56: break;
          case 27: 
            { yybegin(YYINITIAL); return ActLexerTypes.KEYWORD_STARTER;
            } 
            // fall through
          case 57: break;
          case 28: 
            { yybegin(YYINITIAL); return ActLexerTypes.ELSE;
            } 
            // fall through
          case 58: break;
          case 29: 
            { yybegin(YYINITIAL); return ActLexerTypes.DONE;
            } 
            // fall through
          case 59: break;
          case 30: 
            { yybegin(YYINITIAL); return ActLexerTypes.ELSIF;
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
